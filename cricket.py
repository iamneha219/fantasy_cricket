# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cricket.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
import evaluate


class Ui_MainWindow(object):

    def __init__(self):
        self.count_BAT=0
        self.count_WK=0
        self.count_BOW=0
        self.count_AR=0
        self.PointAvl=1000
        self.Pointused=0
        self.teams=set()
        self.AllTeams=[]
        self.playersSelectedList=[]

    # Sql command for Connecting FantasyCricket Database
    def connectdb(self):
        cricket=sqlite3.connect('fantasycricket.db')
        objcricket=cricket.cursor()
        return objcricket

    # Method for displaying BatsMan in ListWidget(playersList)
    def BAT_players(self):
        objcricket=self.connectdb()
        self.PlayersList.clear()
        objcricket.execute('Select Players from Stats where ctg="BAT" ')
        for i in objcricket.fetchall():
            if i[0] not in self.playersSelectedList:
                self.PlayersList.addItem(i[0])

    # Method for displaying Bowlers in ListWidget(playersList)
    def BOW_players(self):
        objcricket=self.connectdb()
        self.PlayersList.clear()
        objcricket.execute('Select Players from Stats where ctg="BWL" ')
        for i in objcricket.fetchall():
            if i[0] not in self.playersSelectedList:
                self.PlayersList.addItem(i[0])

    # Method for displaying AllRounders in ListWidget(playersList)
    def AR_players(self):
        objcricket=self.connectdb()
        self.PlayersList.clear()
        objcricket.execute('Select Players from Stats where ctg="AR" ')
        for i in objcricket.fetchall():
            if i[0] not in self.playersSelectedList:
                self.PlayersList.addItem(i[0])

    # Method for showing WicketKeeper in ListWidget
    def WK_players(self):
        objcricket=self.connectdb()
        self.PlayersList.clear()
        objcricket.execute('Select Players from Stats where ctg="WK" ')
        for i in objcricket.fetchall():
            if i[0] not in self.playersSelectedList:
                self.PlayersList.addItem(i[0])
    
    # Method for Opening Team
    def open_team(self):
        self.teams=set()
        self.playersSelectedList=[]
        cricket=sqlite3.connect('fantasycricket.db')
        objcricket=cricket.cursor()
        objcricket.execute('Select Name from Teams')
        rows= objcricket.fetchall()
        for row in rows:
            self.teams.add(row[0])
        self.team, ok=QtWidgets.QInputDialog.getItem(MainWindow,"Open","Choose A Team",self.teams,0,False)
        if ok == True:
            self.entername.setText(self.team)
            self.PointAvl_count.setText("1000")
            self.Pointused_count.setText("0")
            self.AR_count.setText("0")
            self.WK_count.setText("0")
            self.BOW_count_3.setText("0")
            self.BAT_count.setText("0")
            self.SelectedPlayers.clear()
            self.PlayersList.clear()
            self.count_BAT=0
            self.count_WK=0
            self.count_BOW=0
            self.count_AR=0
            self.PointAvl=1000
            self.Pointused=0
            self.AllTeams=[]
            self.WK_Button.clicked.connect(self.WK_players) # ----------- WK Button
            self.BAT_Button.clicked.connect(self.BAT_players) #--------BAT BUTTON
            self.BOW_Button.clicked.connect(self.BOW_players) #=-------BOW BUTTON
            self.AR_Button.clicked.connect(self.AR_players) #--------AR BUTTON
                
            objcricket=self.connectdb()
            objcricket.execute('Select Players,Name,value from Teams')
            for i in objcricket.fetchall():
                if i[1] == self.team:
                    self.Pointused+=i[2]
                    self.Pointused_count.setText(str(self.Pointused))
                    self.PointAvl_count.setText(str(self.PointAvl-self.Pointused))
                    self.SelectedPlayers.addItem(i[0])
                    self.playersSelectedList.append(i[0])
                    
            objcricket.execute('Select Players,ctg from Stats')
            for i in objcricket.fetchall():
                if i[0] in self.playersSelectedList:
                    if i[1] == 'WK':
                        self.count_WK+=1
                        self.WK_count.setText(str(self.count_WK))
                    if i[1] == 'BWL':
                        self.count_BOW+=1
                        self.BOW_count_3.setText(str(self.count_BOW))
                    if i[1] == 'AR':
                        self.count_AR+=1
                        self.AR_count.setText(str(self.count_AR))
                    if i[1] == 'BAT':
                        self.count_BAT+=1
                        self.BAT_count.setText(str(self.count_BAT))
        else: pass

    # Method for Saving Team
    def save_team(self):
        cricket=sqlite3.connect('fantasycricket.db')
        objcricket=cricket.cursor()
        objcricket.execute('Select Name from Teams')
        self.teamlist=[]
        if self.entername.text() !="":
            if self.SelectedPlayers.count() == 11:
                for i in objcricket.fetchall():
                    self.teamlist.append(i[0])
                objcricket.execute('Select Players,ctg,value from Stats')
                self.k=0
                if self.entername.text() not in self.teamlist:
                    for i in objcricket.fetchall():
                        if i[0] in self.playersSelectedList:
                            objcricket.execute('''INSERT INTO Teams(Players,Name,value)
                            values("%s","%s","%i")'''%(self.playersSelectedList[self.k],self.entername.text(),i[2]))
                            cricket.commit()
                            self.k+=1
                    self.messagebox('Hurry',"%s Team Saved Successfully"%(self.entername.text()))
                    self.PlayersList.clear()
                    self.SelectedPlayers.clear()
                    self.playersSelectedList=[]
                    self.count_BAT=0
                    self.count_WK=0
                    self.count_BOW=0
                    self.count_AR=0
                    self.PointAvl=1000
                    self.Pointused=0
                    self.entername.clear()
                    self.entername.setPlaceholderText("Enter Name")
                    self.PointAvl_count.setText("1000")
                    self.Pointused_count.setText("0")
                    self.AR_count.setText("0")
                    self.WK_count.setText("0")
                    self.BOW_count_3.setText("0")
                    self.BAT_count.setText("0")
                else:
                    self.messagebox('Sorry','%s Team Already Exist.\n(If You Want to Modify Team, Delete it and Save Modified Team)'%(self.entername.text()))
            else:
                self.messagebox('Error','There Should be 11 Players')
        else:
            self.messagebox('Error','Please Enter Team Name')


    # Method for Creating a New Team
    def new_team(self):
        self.messagebox('Welcome','''Please Enter Team Name in the Team Name section\n(Choose 11 Players Precisely)''')
        self.PlayersList.clear()
        self.SelectedPlayers.clear()
        self.SelectedPlayersList=[]
        self.count_BAT=0
        self.count_WK=0
        self.count_BOW=0
        self.count_AR=0
        self.PointAvl=1000
        self.Pointused=0
        self.WK_Button.clicked.connect(self.WK_players) # ----------- WK Button
        self.BAT_Button.clicked.connect(self.BAT_players) #--------BAT BUTTON
        self.BOW_Button.clicked.connect(self.BOW_players) #=-------BOW BUTTON
        self.AR_Button.clicked.connect(self.AR_players) #--------AR BUTTON
        self.entername.clear()
        self.entername.setPlaceholderText("Enter Name")
        self.PointAvl_count.setText("1000")
        self.Pointused_count.setText("0")
        self.AR_count.setText("0")
        self.WK_count.setText("0")
        self.BOW_count_3.setText("0")
        self.BAT_count.setText("0")


   

    # Opening Imported file for evaluation
    def openEvaluate(self):
        self.window=QtWidgets.QWidget()
        self.ui= evaluate.Ui_Evaluation()
        self.ui.setupUi(self.window)
        self.window.show()



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Fantasy Cricket")
        MainWindow.resize(796, 600)
        font = QtGui.QFont()
        font.setFamily("MingLiU-ExtB")
        font.setPointSize(9)
        MainWindow.setFont(font)
        MainWindow.setFocusPolicy(QtCore.Qt.StrongFocus)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 771, 72))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.BAT_label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.BAT_label_2.setObjectName("BAT_label_2")
        self.horizontalLayout.addWidget(self.BAT_label_2)
        self.BOW_label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.BOW_label_2.setObjectName("BOW_label_2")
        self.horizontalLayout.addWidget(self.BOW_label_2)
        self.AR_label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.AR_label_2.setObjectName("AR_label_2")
        self.horizontalLayout.addWidget(self.AR_label_2)
        self.WK_label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.WK_label_2.setObjectName("WK_label_2")
        self.horizontalLayout.addWidget(self.WK_label_2)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 90, 771, 31))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.BAT_count = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.BAT_count.setObjectName("BAT_count")
        self.horizontalLayout_2.addWidget(self.BAT_count)
        self.BOW_count_3 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.BOW_count_3.setObjectName("BOW_count_3")
        self.horizontalLayout_2.addWidget(self.BOW_count_3)
        self.AR_count = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.AR_count.setObjectName("AR_count")
        self.horizontalLayout_2.addWidget(self.AR_count)
        self.WK_count = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.WK_count.setObjectName("WK_count")
        self.horizontalLayout_2.addWidget(self.WK_count)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 130, 771, 31))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.PtsAVL_label = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.PtsAVL_label.setTextFormat(QtCore.Qt.AutoText)
        self.PtsAVL_label.setScaledContents(False)
        self.PtsAVL_label.setObjectName("PtsAVL_label")
        self.horizontalLayout_3.addWidget(self.PtsAVL_label)
        self.PointAvl_count = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.PointAvl_count.setObjectName("PointAvl_count")
        self.horizontalLayout_3.addWidget(self.PointAvl_count)
        self.PtsUsed_label = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.PtsUsed_label.setObjectName("PtsUsed_label")
        self.horizontalLayout_3.addWidget(self.PtsUsed_label)
        self.Pointused_count = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.Pointused_count.setText("")
        self.Pointused_count.setObjectName("Pointused_count")
        self.horizontalLayout_3.addWidget(self.Pointused_count)
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(9, 180, 381, 31))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.BAT_Button = QtWidgets.QRadioButton(self.horizontalLayoutWidget_4)
        self.BAT_Button.setObjectName("BAT_Button")
        self.horizontalLayout_4.addWidget(self.BAT_Button)
        self.BOW_Button = QtWidgets.QRadioButton(self.horizontalLayoutWidget_4)
        self.BOW_Button.setObjectName("BOW_Button")
        self.horizontalLayout_4.addWidget(self.BOW_Button)
        self.AR_Button = QtWidgets.QRadioButton(self.horizontalLayoutWidget_4)
        self.AR_Button.setObjectName("AR_Button")
        self.horizontalLayout_4.addWidget(self.AR_Button)
        self.WK_Button = QtWidgets.QRadioButton(self.horizontalLayoutWidget_4)
        self.WK_Button.setObjectName("WK_Button")
        self.horizontalLayout_4.addWidget(self.WK_Button)
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(10, 230, 771, 321))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.PlayersList = QtWidgets.QListWidget(self.horizontalLayoutWidget_5)
        self.PlayersList.setObjectName("PlayersList")
        self.PlayersList.itemDoubleClicked.connect(self.removelist)
        self.horizontalLayout_5.addWidget(self.PlayersList)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem)
        self.SelectedPlayers = QtWidgets.QListWidget(self.horizontalLayoutWidget_5)
        self.SelectedPlayers.setFrameShape(QtWidgets.QFrame.HLine)
        self.SelectedPlayers.setObjectName("SelectedPlayers")
        self.SelectedPlayers.itemDoubleClicked.connect(self.removelist2)
        self.horizontalLayout_5.addWidget(self.SelectedPlayers)
        self.teamname = QtWidgets.QLabel(self.centralwidget)
        self.teamname.setGeometry(QtCore.QRect(430, 190, 71, 16))
        self.teamname.setObjectName("teamname")
        self.entername = QtWidgets.QLineEdit(self.centralwidget)
        self.entername.setGeometry(QtCore.QRect(530, 190, 113, 20))
        self.entername.setObjectName("entername")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 796, 18))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teeams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teeams.setObjectName("menuManage_Teeams")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNEW_Teams = QtWidgets.QAction(MainWindow)
        self.actionNEW_Teams.setObjectName("actionNEW_Teams")
        self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.menuManage_Teeams.addAction(self.actionNEW_Teams)
        self.menuManage_Teeams.addAction(self.actionOPEN_Team)
        self.menuManage_Teeams.addAction(self.actionSAVE_Team)
        self.menuManage_Teeams.addAction(self.actionEVALUATE_Team)
        self.menuManage_Teeams.addSeparator()
        self.menubar.addAction(self.menuManage_Teeams.menuAction())


        self.actionSAVE_Team.triggered.connect(self.save_team)
        self.actionNEW_Teams.triggered.connect(self.new_team)
        self.actionOPEN_Team.triggered.connect(self.open_team)
        self.actionEVALUATE_Team.triggered.connect(self.openEvaluate)

        


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.WK_Button, self.BAT_Button)
        MainWindow.setTabOrder(self.BAT_Button, self.AR_Button)
        MainWindow.setTabOrder(self.AR_Button, self.BOW_Button)


    def removelist(self,item):
        self.PlayersList.takeItem(self.PlayersList.row(item))
        self.PlayersList.addItem(item.text())
    def removelist2(self,items):
        self.PlayersList.takeItem(self.PlayersList.row(item))
        self.PlayersList.addItem(item.text())



    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantacy Game"))
        self.BAT_label_2.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.BOW_label_2.setText(_translate("MainWindow", "Bowler(BOW)"))
        self.AR_label_2.setText(_translate("MainWindow", "Allrounder(AR)"))
        self.WK_label_2.setText(_translate("MainWindow", "Wicketkeeper(WK)"))
        self.PtsAVL_label.setText(_translate("MainWindow", "Points Available"))
        self.PtsUsed_label.setText(_translate("MainWindow", "Points Used"))
        self.BAT_Button.setText(_translate("MainWindow", "BAT"))
        self.BOW_Button.setText(_translate("MainWindow", "BOW"))
        self.AR_Button.setText(_translate("MainWindow", "AR"))
        self.WK_Button.setText(_translate("MainWindow", "WK"))
        self.teamname.setText(_translate("MainWindow", "Team Name"))
        self.menuManage_Teeams.setTitle(_translate("MainWindow", "Manage Teeams"))
        self.actionNEW_Teams.setText(_translate("MainWindow", "NEW Teams"))
        self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
